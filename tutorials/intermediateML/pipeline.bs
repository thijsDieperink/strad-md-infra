// PIPELINE
//   by Tim MÃ¼ller
//
// Based on work by Andrea Marino and Jingye Wang.
//
// A more up-to-date version of the original pipeline defined in 'pipeline.bs'.
// Specifically, carries the result of functions in the IntermediateResults as variables.
//


import compute;
import visualization;


// Change this location according to your instance
#[on("worker")]
{
    //////// TRAINING ////////
    println("Cleaning dataset...");
    let train_clean := clean(new Data{ name := "nlp_train" });
    let test_clean  := clean(new Data{ name := "nlp_test" });

    println("Tokenizing dataset...");
    let train := tokenize(train_clean);
    let test  := tokenize(test_clean);

    println("Removing stopwords from dataset...");
    train := remove_stopwords(train);
    test  := remove_stopwords(test);

    println("Performing feature vectorization...");
    let vectors := create_vectors(train, test);

    println("Training model...");
    let model := train_model(train, vectors);
    commit_result("nlp_model", model);



    //////// TESTING ////////
    println("Generating bigrams...");
    train := generate_bigrams(train);
    test  := generate_bigrams(test);

    println("Classying tweets...");
    // This is called a submission, because it's for a Kaggle challenge - but it's just a set of classifications.
    let submission := create_submission(test, vectors, model);

    // let n_top_bigrams := 15;
    // print("Plotting bigrams (top "); print(n_top_bigrams); println(")...");
    // let bigram_plot := plot_bigrams_distribution(train, n_top_bigrams);
    // commit_result("bigram_plot", bigram_plot);

    // println("Plotting predictions...");
    // let pred_plot := generate_prediction_plot(test_clean, submission);
    // commit_result("prediction_plot", pred_plot);

    // println("Plotting location information...");
    // let loc_plot := generate_location_profile(train, 10);
    // commit_result("location_plot", loc_plot);

    // println("Plotting tweet information...");
    // let tweet_plot := generate_tweets_profile(train, 15);
    // commit_result("tweet_plot", tweet_plot);

    // println("Plotting keyword information...");
    // let keyword_plot := generate_keywords_profile(train, 15);
    // commit_result("keyword_plot", keyword_plot);

    println("Generating interactive plot...");
    let plot := visualization_action(
        train,
        test,
        submission
    );
    return commit_result("plot_interface", plot);
}
